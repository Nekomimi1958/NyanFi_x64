<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=Shift_JIS">
<title>Git の利用について</title>
<link rel="stylesheet" type="text/css" href="help.css">
<object type="application/x-oleobject" classid="clsid:1e2a7bd0-dab9-11d0-b93a-00c04fc99f9e">
	<param name="Keyword" value="blame">
	<param name="Keyword" value="FileEdit">
	<param name="Keyword" value="Git">
	<param name="Keyword" value="Git for Windows">
	<param name="Keyword" value="git.exe">
	<param name="Keyword" value="git-bash.exe">
	<param name="Keyword" value="git-gui.exe">
	<param name="Keyword" value="GitViewer">
	<param name="Keyword" value="Gitビュアー">
	<param name="Keyword" value="OpenGitURL">
	<param name="Keyword" value="Pack">
	<param name="Keyword" value="RepositoryList">
	<param name="Keyword" value="SelGitChanged">
	<param name="Keyword" value="ShowFileInfo">
	<param name="Keyword" value="コミット履歴">
	<param name="Keyword" value="ファイル情報">
	<param name="Keyword" value="リポジトリ一覧">
	<param name="Keyword" value="一覧ダイアログ">
</object>
</head>

<body>

<h1>Git の利用について</h1>
<p>
<b>git.exe</b> (Git for Windows) がインストールされてると、後述の Git 関連機能を利用できます。<br>
標準的な場所(%PROGRAMFILES%\Git\cmd など)にインストールされている場合は自動的に検出されますが、そうでない場合は <a href="hid00024.htm#Other">オプション設定 - 一般2 - その他</a> で設定してください。<br>
</p>

<p class="link_box">
<a href="#FileInfo">ファイル情報の表示</a> ／ <a href="#GitViewer">Gitビュアー</a> ／ <a href="#GitCommand">Git 補助コマンドの利用</a> 
</P>

<h3 id="FileInfo">ファイル情報の表示</h3>
<p>直下に .git があるディレクトリ、またはその中の [..] 位置では、ファイル情報に以下の項目が表示されます。</p>

<dl>
<dt class="no_bg">Remote URL
<dd>リモートリポジトリのURL(https://〜)です。<br>
.git/config 内の [remote &quot;origin&quot;] の内容から想定されるURLを表示しています。<br>
GitHub、GitLab、BitBucket では多分大丈夫だと思います。<br>
<a href="hid00005.htm#OpenGitURL">OpenGitURL</a> コマンドを実行すると、カーソル位置項目に対応するページをブラウザで開けます(ファイル情報の右クリックメニューからも可能)。<br>

<dt class="no_bg">Git-Commit
<dd>直前のコミット情報です。括弧内はローカル参照、&#x25b6 は &quot;HEAD -&gt;&quot; を表しています。<br>

<dt class="no_bg">Git-Status
<dd>&quot;git status --porcelain&quot; の取得結果から、フラグごとのファイル数(インデックス/ワーキングツリー)を表示します。<br>
例えば、ワーキングツリーに2個の変更されたファイルがある場合、&quot;M:_/2&quot; と表示されます。<br>
<a href="hid00005.htm#SelGitChanged">SelGitChanged</a> コマンドを実行すると、カレントで変更されているファイル(フラグが &quot;?&quot; 以外)が選択されます。<br>
</dl>

<p>なおリポジトリの作業ディレクトリ下で、トップの [..] 以外の項目については、<b>Remote URL</b> のみが表示されます。</p>

<p>ファイル情報の右クリックメニュー「<b>この項目を隠す</b>」で非表示になっている項目は取得を試みません。<br>
Git-Commit/Status の内容はキャッシュして再利用しますが(.git/index のタイムスタンプ変化やファイルリスト更新で再取得)、操作が滞るような場合には非表示にしてみてください。<br>
なおキャッシュ情報は、INIファイルに保存され、次回起動時にも引き継がれます。また、<a href="hid00005.htm#RepositoryList">RepositoryList</a> コマンドによる「<b>リポジトリ一覧</b>」の表示にも用いられます。<br>
</p>

<div class="indent1">
<b>表示例</b><br>
<pre class="example_box">
     Remote URL: https://github.com/Nekomimi1958/NyanFi_x64
     Git-Commit: (&#x25b6master) v13.08 Add Git command
     Git-STATUS: M:_/2
</pre>
</div>
<br>

<h3 id="GitViewer">Gitビュアー</h3>
<div class="spc_box_p">
Gitの作業ディレクトリ内で <a href="hid00005.htm#GitViewer">GitViewer</a> コマンドを実行すると、<b>Gitビュアー</b>が表示されます。<br>
</div>
<div class="spc_box_p info_text">
Gitビュアーから git.exe やその他のツールを実行する際の作業ディレクトリは、Git作業ディレクトリのトップ(直下に .git があるディレクトリ)になります。
</div>

<dl>
<dt class="no_bg">ブランチ一覧
<dd>
画面の左側には<b>ブランチ一覧</b>があります、右クリックメニューから、チェックアウト(ダブルクリックや<span class="btn_frame">ENTER</span>キーでも可能)、ブランチの作成/削除/改名、マージ、タグ付け、リセットを行えます。<br>
ブランチ一覧の下には、リモートブランチやタグ一覧を表示できます(右クリックメニューで表示/非表示を切り替え可能)。<br>

<dt class="no_bg">コミット履歴
<dd>
画面右側の上部には<b>コミット履歴</b>が表示されます。<br>
<div class="info_text">
デフォルトでは、表示されるコミット履歴数が100に制限されています。これを変更したい場合は、<b>GitViewer</b> コマンドの <b>N</b>〜 パラメータで指定してください。<br>
</div>

<div class="spc_box">
コミット履歴の下部には<b>検索バー</b>があり、検索語を入力することでコミットを上下方向に検索できます。入力欄の幅は<span class="btn_frame">▲</span>ボタンとの境界をドラッグすることで変えられます。<br>
検索バーには以下のようなツールボタンもあります。<br>
</div>

<dl>
<dt class="no_bg"><span class="btn_frame">更新</span><span style="font-weight: normal;">(<span class="btn_frame">F5</span>でも可)</span>
<dd>一覧の表示を最新の状態に更新します。<br>

<dt class="no_bg"><span class="btn_frame">待避</span>
<dd>現在の作業内容をメッセージ付きで待避します(git stash save)。<br>
待避した内容はコミット履歴の先頭に表示され、右クリックメニューから復帰や削除を行えます(git stash pop/apply/drop)。<br>

<dt class="no_bg"><span class="btn_frame">Console</span>
<dd>標準的な場所にある <b>git-bash.exe</b> が起動します。見つからない場合、または別のものを指定したい場合は、バーの右クリックメニューから選択してください。<br>
<dt class="no_bg"><span class="btn_frame">GUI</span>
<dd>デフォルトでは標準的な場所にある <b>git-gui.exe</b> が起動します。バーの右クリックメニューから変更可能です。
</dl>

<div class="spc_box">
右クリックメニューからは、タグ付け、チェリーピック、ブランチ名/コミットIDのコピー、ZIPアーカイブの作成(<a href="hid00005.htm#Pack">Pack</a> コマンドのキーでも可)、コミット情報の表示(<span class="btn_frame">ENTER</span>または <a href="hid00005.htm#ShowFileInfo">ShowFileInfo</a> コマンドのキーでも可)などを行えます。<br>
また「<b>一時アーカイブとして開く</b>」では、コミットを一時アーカイブとして出力し、ファイラーに戻って反対側リストで開きます。リビジョンのファイルツリーを閲覧したい場合などに利用してください。<br>
「<b>このコミットまでの履歴を表示</b>」では、制限数以降のコミットを表示することができます。<span class="btn_frame">更新</span>ボタンを押すと最初の状態に戻ります。<br>
</div>

<dt class="no_bg">差分概略
<dd>
履歴でコミットを選択すると、下部にその差分の概略が表示されます。<br>
下部バーのツールボタンで、カーソル位置のファイルに対して以下の操作を行えます。<br>
<dl>
<dt class="no_bg"><span class="btn_frame">追加</span><span style="font-weight: normal;">(作業ツリーのみ)</span>
<dd>ファイルをインデックスに追加します。
<dt class="no_bg"><span class="btn_frame">取消</span><span style="font-weight: normal;">(インデックスのみ)</span>
<dd>ステージングを取り消します。通常は &quot;git reset HEAD 〜&quot; を、HEAD がない場合は &quot;git rm --cached 〜&quot; を実行します。
<dt class="no_bg"><span class="btn_frame">コミット</span>
<dd>ステージングされているファイルをコミットします。メッセージを入力するためのダイアログが表示されます。<br>
なお、入力欄からキーで確定したい場合は<span class="btn_frame">Ctrl</span>+<span class="btn_frame">ENTER</span>を押してください。<br>

<dt class="no_bg"><span class="btn_frame">差分詳細</span><span style="font-weight: normal;">(<span class="btn_frame">ENTER</span>または <a href="hid00005.htm#ShowFileInfo">ShowFileInfo</a> コマンドのキーでも可)</span>
<dd>親コミットからの差分詳細を<a href="hid00073.htm">一覧ダイアログ</a>で表示します。
<dt class="no_bg"><span class="btn_frame">編集</span><span style="font-weight: normal;">(<a href="hid00005.htm#ToParentOnLeft">FileEdit</a> コマンドのキーでも可)</span>
<dd>ファイルをテキストエディタで開きます。リポジトリ内のファイルは <b>NyanFi</b> の一時ディレクトリに出力して開きます(&quot;core.autocrlf=true&quot; なら改行をCR/LFに変換)。<br>
なお右クリックメニューの「<b>このファイルの内容を表示</b>」(<a href="hid00005.htm#TextViewer">TextViewer</a> コマンドのキーでも可)によって、内容を<a href="hid00073.htm">一覧ダイアログ</a>で表示することも可能。<br>
<dt class="no_bg"><span class="btn_frame">Diff Tool</span>
<dd>親コミットからの差分を、git に設定されている外部Diffツールで表示します。
<dt class="no_bg"><span class="btn_frame">Blame</span>
<dd>親コミットに対する blame を <b>Git Gui</b> で表示します。
</dl>
右クリックメニューからは、「<b>すべての新規作成・変更・削除を追加</b> (git add -A)」/「<b>すべての変更・削除を追加</b> (git add -u)」(作業ツリーのみ)<、「<b>すべてのステージングを取り消し</b>」(インデックスのみ)などを行えます(コミット履歴の右クリックメニューでも可)。<br>
また「<b>このファイルのコミット履歴を表示</b>」では、カーソル位置ファイルのみについてのコミット履歴を表示できます。<span class="btn_frame">更新</span>ボタンまたは<span class="btn_frame">F5</span>キーを押すと絞り込みが解除されます。<br>
</dl>

<div class="spc_box_p">
カーソル移動などは、ファイラーやテキストビュアーで割り当てられているのと同じキー操作でできます。<br>
ブランチ一覧/コミット履歴間のフォーカス移動は、<a href="hid00005.htm#ToLeft">ToLeft</a> / <a href="hid00005.htm#ToRight">ToRight</a>、<a href="hid00005.htm#ToParentOnLeft">ToParentOnLeft</a> / <a href="hid00005.htm#ToParentOnRight">ToParentOnRight</a> コマンドが割り当てられているキーや、<span class="btn_frame">←</span> / <span class="btn_frame">→</span>キーで行えます。<br>
コミット履歴/差分概略間は、<a href="hid00005.htm#ToRight">ToRight</a> / <a href="hid00005.htm#ToParentOnRight">ToParentOnRight</a> コマンドのキーや<span class="btn_frame">→</span>キーで移動できます。<br>
なお右クリックメニューは、アプリケーションキーや<span class="btn_frame">Shift</span>+<span class="btn_frame">F10</span>キーの他に、ファイラーで <a href="hid00005.htm#ContextMenu">ContextMenu</a> コマンドが割り当てられているキーでも表示できます。<br>
</div>

<div class="spc_box_p">
ブランチ一覧、コミット履歴、差分概略にはリストのフォント・配色が用いられます。なお Git 固有の配色については <a href="hid00023.htm">オプション設定 - フォント・配色</a> で指定してください。<br>
</div>
<br>

<h3 id="GitCommand">Git 補助コマンドの利用</h3>
<p>
<a href="hid00063.htm#Git">ExeCommands コマンドの Git 補助コマンド</a> を実行すると、カレントを作業ディレクトリとして、指定したコマンド/パラメータで git.exe が実行されます。<br>
これによって、コンソールを開かなくても <b>NyanFi</b> から直接 Git コマンドを利用できます。<br>
結果は、ログおよび定義済み変数 <b>Buffer</b> に出力されます。<br>
</p>
<div class="spc_box_p">
なお Git 補助コマンドの結果(1行目が &quot;$ git 〜&quot;)を<a href="hid00073.htm">一覧ダイアログ</a>で表示した場合、行頭部の &quot;<b>*</b>&quot;、&quot;<b>|</b>&quot;、&quot;<b>/</b>&quot;、&quot;<b>\</b>&quot;、&quot;<b>_</b>&quot; からなる部分はグラフィック表示になります(* は「Git: コミットマーク」の●印に、線は「罫線の色」で描画)。また &quot;$ git 〜&quot; で始まる行は「見出しの文字色」で、&quot;<b>+</b>&quot; で始まる行は「Git: + 行」、&quot;<b>-</b>&quot; で始まる行は「Git: - 行」の色で表示されます。
</div>

<div class="indent1">
<b>使用例</b><br>
入力したURLのリポジトリをカレントにクローン化<br>
<pre class="example_box">
Input_":クローン:URL:URL"
Test_URL!=""
IfTrue
  Git_"clone %URL%"
EndIf
</pre>

ステータスをヒント表示
<pre class="example_box">
Git_status
Hint_!%Buffer%
WaitForKey
Hint
</pre>

カーソル位置ファイルに対する変更履歴を一覧ダイアログで表示<br>
<pre class="example_box">
Git_"log --follow -p -- %NamePart%"
ListBuffer_"Git Log - %NamePart%"
</pre>

ステータスとコミット履歴をまとめて一覧ダイアログで表示<br>
<pre class="example_box">
IfNotGit
  Warn_"Gitの作業ディレクトリではありません。"
  Exit
Endif

Git_status --porcelain --branch
Set_RES=%Buffer%
Add_RES<<""

Git_log --graph --decorate --oneline
Add_RES<<%Buffer%

Set_Buffer=%RES%
ListBuffer_"Git Status/Log - %CurPath%"
</pre>

すべての変更内容をインデックスに追加し、入力したメッセージでコミット<br>
<pre class="example_box">
Input_":%CurPath%:コミットメッセージ:MSG"
Test_MSG==""
IfTrue_Exit

Git_add -A
Set_RES=%Buffer%
Add_RES<<""

Git_commit -m "%MSG%"
Add_RES<<%Buffer%

Set_Buffer=%RES%
ListBuffer_"Git Add/Commit - %CurPath%"
</pre>

ポップアップメニューでブランチを選んでチェックアウト
<pre class="example_box">
Git_branch
ReplaceBuffer_/^\$ git .*\r\n/=""
PopupMenu_Buffer
Test_MenuIndex!=0
IfTrue
  Set_Buffer=%MenuStr%
  MatchBuffer_/^\*/
  IfFalse
    Hint_"checkout %MenuStr%"
    Git_"checkout %MenuStr%"
  EndIf
EndIf
Exit
</pre>

</div>
<br><br>

</body>
</html>
